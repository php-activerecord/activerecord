{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Active Record is a software design pattern that abstracts database interactions, enabling developers to treat database records as objects within the host programming language (in our case, PHP). Each object instance represents a row in a database table, and its attributes correspond to the table's columns. This pattern allows for the creation, retrieval, updating, and deletion of records without the need for explicit SQL queries, streamlining database operations and enhancing code maintainability.</p> <pre><code>$person = Person::find(3); // find author with id of 3\necho $person-&gt;first_name; // \"Bruce\"\necho $person-&gt;age; // 63\n\necho gettype($person-&gt;first_name); // \"string\"\necho gettype($person-&gt;age); // \"integer\"\n\n$person-&gt;first_name = \"Sam\";\n$person-&gt;save();\necho $person-&gt;first_name; // \"Sam\"\n\n$person-&gt;delete();\n\nPerson::find(3); // RecordNotFound exception\n</code></pre>"},{"location":"callbacks/","title":"Callbacks in PHP ActiveRecord","text":""},{"location":"callbacks/#introduction","title":"Introduction","text":"<p>Callbacks in PHP ActiveRecord are methods that allow you to execute custom code at specific points in a model's lifecycle. They provide hooks to intervene in various stages of record creation, updating, and deletion, as well as to implement data validation. Understanding and using callbacks effectively enhances the flexibility and customizability of your models.</p>"},{"location":"callbacks/#why-use-callbacks","title":"Why Use Callbacks?","text":"<p>Customization: Callbacks enable you to customize and extend the behavior of your models without modifying core code.</p> <p>Data Integrity: They help enforce data integrity by allowing you to run validation checks and perform data transformations.</p> <p>Business Logic: Callbacks let you encapsulate complex business logic within your models, improving maintainability.</p>"},{"location":"callbacks/#callbacks-overview","title":"Callbacks Overview","text":"<ol> <li> <p><code>after_construct</code>    The <code>after_construct</code> callback is triggered immediately after a new model instance is created, but before it's populated with data. It's useful for performing tasks like setting default attribute values or initializing resources.</p> <p>Example:</p> <pre><code>class User extends ActiveRecord\\Model {\n  public function after_construct() {\n    $this-&gt;status = 'active'; // Set a default value for 'status'\n  }\n}\n</code></pre> </li> <li> <p><code>before_create</code>    The <code>before_create</code> callback runs just before a new record is saved to the database. It's ideal for actions such as data manipulation or validation before data insertion.</p> <p>Example:</p> <pre><code>class User extends ActiveRecord\\Model {\n  public function before_create() {\n    $this-&gt;password = password_hash($this-&gt;password, PASSWORD_DEFAULT); // Hash the password before saving\n  }\n}\n</code></pre> </li> <li> <p><code>after_create</code> The <code>after_create</code> callback is executed after a new record has been successfully created and saved to the database. It's suitable for post-creation actions, like sending notifications or updating related records.</p> <p>Example:</p> <pre><code>class User extends ActiveRecord\\Model {\n    public function after_create() {\n        // Send a welcome email to the user\n        Mailer::sendWelcomeEmail($this-&gt;email); \n    }\n}\n</code></pre> </li> <li> <p><code>before_update</code>       The <code>before_update</code> callback is invoked just before an existing record is updated in the database. It allows you to modify data or perform actions on the model instance before saving changes.</p> <p>Example:</p> <pre><code>class User extends ActiveRecord\\Model {\n public function before_update() {\n   // Update the 'updated_at' timestamp\n   $this-&gt;updated_at = date('Y-m-d H:i:s'); \n }\n}\n</code></pre> </li> <li> <p><code>after_update</code>    The <code>after_update</code> callback is triggered after an existing record has been successfully updated in the database. It can be used for tasks like logging changes or sending notifications.</p> <p>Example:</p> <pre><code>class User extends ActiveRecord\\Model {\n    public function after_update() {\n        Logger::logUserUpdate($this-&gt;id); // Log the user's update activity\n    }\n}\n</code></pre> </li> <li> <p><code>before_destroy</code>    The <code>before_destroy</code> callback is invoked just before a record is deleted from the database. It allows you to perform any necessary cleanup or validation before deletion.</p> <p>Example:</p> <pre><code>class User extends ActiveRecord\\Model {\n    public function before_destroy() {\n        if ($this-&gt;hasPendingOrders()) {\n            throw new Exception('Cannot delete user with pending orders');\n        }\n    }\n}\n</code></pre> </li> <li> <p><code>after_destroy</code> The <code>after_destroy</code> callback is triggered after a record has been successfully deleted from the database. It can be used for tasks like updating related records or sending notifications.</p> <p>Example:</p> <pre><code>class User extends ActiveRecord\\Model {\n    public function after_destroy() {\n        // Clear user association from orders\n        Order::where('user_id', $this-&gt;id)-&gt;update(array('user_id' =&gt; null)); \n    }\n}\n</code></pre> </li> </ol>"},{"location":"conventions/","title":"Naming Conventions","text":"<p>Naming conventions in ActiveRecord are essential for maintaining a clean and consistent database schema and for making your code more readable and maintainable. These conventions help developers understand the relationships between database tables, columns, and PHP classes without needing to explicitly specify them. Here's a breakdown of the naming conventions in ActiveRecord:</p>"},{"location":"conventions/#table-names","title":"Table Names:","text":"<p>Table names should be pluralized, lowercase, and snake_case. For example, if you have a model called <code>User</code>, the corresponding table should be named <code>users</code>.</p> <p>If desired, you may explicitly define the table name: <pre><code>class User extends ActiveRecord\\Model {\n    public static string $table_name = \"smf_members\";\n}\n</code></pre></p>"},{"location":"conventions/#modelclass-names","title":"Model/Class Names:","text":"<p>Model or class names should be singular, capitalized, and use CamelCase (also known as PascalCase). The class name should match the singular form of the table name. If the table is named <code>users</code>, the corresponding model/class should be named <code>User</code>.</p>"},{"location":"conventions/#primary-key","title":"Primary Key:","text":"<p>By convention, ActiveRecord assumes that the primary key column in a table is named <code>id</code>. You don't need to specify this explicitly unless you want to use a different column name as the primary key:</p> <pre><code>class User extends ActiveRecord\\Model {\n    public static string $primary_key = \"member_id\";\n}\n</code></pre>"},{"location":"conventions/#foreign-keys","title":"Foreign Keys:","text":"<p>Foreign keys in tables should be named after the singular form of the associated table followed by _id. For example, if you have a foreign key referencing the users table, it should be named <code>user_id</code>.</p>"},{"location":"conventions/#join-tables-for-many-to-many-relationships","title":"Join Tables (for many-to-many relationships):","text":"<p>Join tables that represent many-to-many relationships should be named by combining the singular form of the associated tables in alphabetical order, separated by underscores. For example, if you have a many-to-many relationship between User and Role, the join table should be named <code>roles_users</code>.</p>"},{"location":"conventions/#columns","title":"Columns:","text":"<p>Column names should be lowercase and snake_case. They should be descriptive of the data they store to make it easier to understand the purpose of each column. Avoid using reserved words or database-specific keywords as column names. Here's an example that illustrates these conventions:</p> <pre><code>// Model definition\nclass User extends ActiveRecord/Model\n{\n  // The corresponding table is assumed to be named \"users\"\n}\n</code></pre> <pre><code># typical table structure\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    first_name VARCHAR(255),\n    last_name VARCHAR(255),\n    email VARCHAR(255),\n    role_id INT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"crud/","title":"Basic CRUD","text":""},{"location":"crud/#create","title":"Create","text":"<p>Here we create a new post by instantiating a new object and then invoking the <code>save()</code> method.</p> <pre><code>$post = new Post();\n$post-&gt;title = 'My first blog post!!';\n$post-&gt;author_id = 5;\n$post-&gt;save();\n// INSERT INTO `posts` (title,author_id) VALUES('My first blog post!!', 5)\n</code></pre>"},{"location":"crud/#retrieve","title":"Retrieve","text":"<p>These are your basic methods to find and retrieve records from your database. See the Finders section for more details.</p> <pre><code>$post = Post::find(1);\necho $post-&gt;title; // 'My first blog post!!'\necho $post-&gt;author_id; // 5\n\n# also the same since it is the first record in the db\n$post = Post::first();\n\n# finding using dynamic finders\n$post = Post::find_by_name('The Decider');\n$post = Post::find_by_name_and_id('The Bridge Builder',100);\n$post = Post::find_by_name_or_id('The Bridge Builder',100);\n\n# finding using a conditions array\n$posts = Post::find('all',['conditions' =&gt; ['name=? or id &gt; ?','The Bridge Builder',100]]);\n</code></pre>"},{"location":"crud/#update","title":"Update","text":"<p>To update you would just need to find a record first and then change one of its attributes. It keeps an array of attributes that are \"dirty\" (that have been modified) and so our sql will only update the fields modified.</p> <pre><code>$post = Post::find(1);\necho $post-&gt;title; // 'My first blog post!!'\n$post-&gt;title = 'Some real title';\n$post-&gt;save();\n// UPDATE `posts` SET title='Some real title' WHERE id=1\n\n$post-&gt;title = 'New real title';\n$post-&gt;author_id = 1;\n$post-&gt;save();\n// UPDATE `posts` SET title='New real title', author_id=1 WHERE id=1\n</code></pre>"},{"location":"crud/#delete","title":"Delete","text":"<p>Deleting a record will not destroy the object. This means that it will call sql to delete the record in your database but you can still use the object if you need to.</p> <pre><code>$post = Post::find(1);\n$post-&gt;delete();\n// DELETE FROM `posts` WHERE id=1\necho $post-&gt;title; # 'New real title'\n</code></pre>"},{"location":"finders/","title":"Finders","text":"<p>Finders in PHP ActiveRecord Introduction Finders in PHP ActiveRecord are methods that allow you to retrieve records from a database table based on specific criteria. Finders simplify the process of querying the database by providing a more intuitive and object-oriented approach to building queries.</p>"},{"location":"finders/#basic-finder-methods","title":"Basic Finder Methods","text":"<p>PHP ActiveRecord provides a variety of basic finder methods to retrieve records from the database. These methods can be chained together for more complex queries.</p> <ol> <li> <p><code>find()</code> The find() method retrieves one or more records by its primary key(s).</p> <pre><code>// Retrieve a user by ID\n$user = User::find(1);\n\nif ($user) {\necho $user-&gt;first_name;\n} else {\necho \"User not found\";\n}\n\n// Retrieve using an array of IDs\n$users = User::find(1, 2, 3);\n</code></pre> </li> <li> <p><code>all()</code> The all() method retrieves all records from the table.</p> <pre><code>// Retrieve all users\n$users = User::all();\n\nforeach ($users as $user) {\n  echo $user-&gt;first_name . '&lt;br&gt;';\n}\n</code></pre> </li> <li> <p><code>where()</code> The <code>where()</code> method is used to filter records based on specific conditions.</p> <pre><code>// Find users with a specific email domain\n$users = User::where('email', 'LIKE', '%example.com')-&gt;to_a();\n</code></pre> <pre><code>// Find the first user with a specific condition\n$user = User::where('first_name', 'John')-&gt;first();\n</code></pre> </li> <li> <p><code>order_by()</code> The order_by() method allows you to specify the sorting order of the retrieved records.</p> <pre><code>// Retrieve users sorted by last name in ascending order\n$users = User::order_by('last_name')-&gt;to_a();\n\n// Retrieve users sorted by last name in descending order\n$users = User::order_by_desc('last_name')-&gt;to_a();\n</code></pre> </li> </ol>"},{"location":"finders/#chaining-finder-methods","title":"Chaining Finder Methods","text":"<p>You can chain multiple finder methods together to create more complex queries. For example:</p> <pre><code>// Retrieve all active users with a specific role, sorted by registration date\n$activeUsers = User::where('active', true)\n  -&gt;where('role', 'admin')\n  -&gt;order_by('created_at')\n  -&gt;to_a();\n</code></pre>"},{"location":"findersdynamic/","title":"Dynamic Finders","text":"<p>Dynamic finders in ActiveRecord provide a convenient way to query records from a database table based on attribute values without having to write custom SQL queries. These dynamic finders generate SQL queries dynamically based on the attribute you specify. They follow a specific naming convention such as <code>find_by_attribute</code>, <code>find_or_initialize_by_attribute</code>, and so on.</p>"},{"location":"findersdynamic/#basic-usage","title":"Basic Usage","text":"<p>The basic syntax for dynamic finders is as follows:</p> <ul> <li><code>find_by_attribute(value)</code>: Find the first record with the specified attribute value.</li> </ul> <p>Here's how you can use dynamic finders:</p> <pre><code>// Find the first user with the name \"John\"\n$user = User::find_by_name('John');\n\n// Find the first product with the price of 50.00\n$product = Product::find_by_price(50.00);\n</code></pre>"},{"location":"findersdynamic/#advanced-usage","title":"Advanced Usage","text":"<p>You can also chain multiple attribute conditions using dynamic finders for more complex queries:</p> <pre><code>// Find the first user with the name \"John\" and the role \"admin\"\n$user = User::find_by_name_and_role('John', 'admin');\n\n// Find the first product with the name \"Product Name\" and price of 50.00\n$product = Product::find_by_name_and_price('Product Name', 50.00);\n</code></pre>"},{"location":"findersdynamic/#limitations","title":"Limitations","text":"<p>While dynamic finders are convenient for simple queries, they may have limitations for more complex queries that involve joins or subqueries. In such cases, you may need to use custom SQL queries or ActiveRecord's query-building methods.</p>"},{"location":"findersdynamic/#error-handling","title":"Error Handling","text":"<p>It's important to note that dynamic finders return null when no records match the specified criteria. Therefore, it's a good practice to check the result for null to handle cases where no record is found:</p> <pre><code>$user = User::find_by_email('nonexistent@example.com');\n\nif ($user) {\n    // Record found\n} else {\n    // Record not found\n}\n</code></pre>"},{"location":"hasandbelongstomany/","title":"<code>$has_and_belongs_to_many</code> (many-to-many)","text":"<p>The <code>$has_and_belongs_to_many</code> relationship in ActiveRecord represents a many-to-many association between two database tables. It allows you to specify that records in one table can be associated with multiple records in another table, and vice versa. To define a <code>$has_and_belongs_to_many</code> relationship, you need to configure the following properties:</p> <ul> <li> <p>Name of the Relationship: This property specifies the name of the relationship, which is used to access the associated records. It is typically set as a string representing the name of the associated model in plural form.</p> <pre><code>static $has_and_belongs_to_many = ['categories' =&gt; []];\n</code></pre> </li> <li> <p>Class Name (Optional): This property allows you to explicitly specify the class name of the associated model if it differs from the relationship name. This can be useful if your relationship and model names do not follow the default naming conventions.</p> <pre><code>static $has_and_belongs_to_many = [\n    'customCategories' =&gt; [\n        'className' =&gt; 'Category'\n    ]\n];\n</code></pre> </li> <li> <p>Association Foreign Key (Optional): This property allows you to specify the name of the foreign key in the join table that references the associated model. Use it when the foreign key in the join table has a different name from the associated model's primary key. This property is optional.</p> <pre><code>static $has_and_belongs_to_many = [\n    'categories' =&gt; [\n        'association_foreign_key' =&gt; 'category_id']\n    ];\n</code></pre> </li> <li> <p>Foreign Key (Optional): By default, ActiveRecord assumes that the foreign key in the join table is derived from the name of the current model and suffixed with \"_id\" (e.g., \"product_id\" for a <code>Product</code> model). You can specify a different foreign key if needed. This property is optional.</p> <pre><code>static $has_and_belongs_to_many = [\n    'categories' =&gt; ['foreign_key' =&gt; 'product_id']];\n</code></pre> </li> <li> <p>Join Table: You may specify the name of the join table that connects the two models (if conventions aren't followed, see join tables. This table is responsible for mapping the relationships between the associated records.</p> <pre><code>static $has_and_belongs_to_many = [\n    'categories' =&gt; [\n        'join_table' =&gt; 'custom_categories_products'\n    ]\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <pre><code>class Product extends ActiveRecord\\Model {\n    static $has_and_belongs_to_many = ['categories'];\n}\n\nclass Category extends ActiveRecord\\Model {}\n\n// Finding a product and accessing its categories\n$product = Product::find(1);\n\n// Accessing the product's categories\n$categories = $product-&gt;categories;\n\n// Iterating through and displaying the product's categories\nforeach ($categories as $category) {\n    echo \"Category Name: \" . $category-&gt;name . \"&lt;br&gt;\";\n    echo \"Description: \" . $category-&gt;description . \"&lt;br&gt;&lt;br&gt;\";\n}\n</code></pre>"},{"location":"hasmany/","title":"<code>$has_many</code> (one-to-many)","text":"<p>The <code>$has_many</code> relationship in ActiveRecord represents a one-to-many association between two database tables. It allows you to specify that a record in one table can be associated with multiple records in another table. To define a <code>$has_many</code> relationship, you need to configure the following properties:</p> <ul> <li> <p>Name of the Relationship: This property specifies the name of the relationship, which is used to access the associated records. It is typically set as a string representing the name of the associated model in plural form.</p> <pre><code>static $has_many = ['posts' =&gt; []];\n</code></pre> </li> <li> <p>Class Name: This property allows you to explicitly specify the class name of the associated model if it differs from the relationship name. This can be useful if your relationship and model names do not follow the default naming conventions.</p> <pre><code>static $has_many = [\n    'customPosts' =&gt; [\n        'class_name' =&gt; 'Post'\n    ]];\n</code></pre> </li> <li> <p>Foreign Key: By default, ActiveRecord assumes that the foreign key in the associated table is derived from the name of the current model and suffixed with \"_id\" (e.g., \"user_id\" for a <code>User</code> model). However, you can specify a different foreign key if needed.</p> <pre><code>static $has_many = [\n    'posts' =&gt; [\n        'foreign_key' =&gt; 'custom_user_id'\n    ]];\n</code></pre> </li> <li> <p>Primary Key: This property allows you to specify the primary key of the associated table if it is different from the default \"id\" column. Use this when your associated table uses a different primary key column.</p> <p><pre><code>static $has_many = [\n    'pots' =&gt; [\n        'primary_key' =&gt; 'post_id'\n    ]\n];\n</code></pre>   - Order (Optional): You can specify the order in which the associated records should be retrieved using the <code>order</code> property. This property is optional.</p> <pre><code>static $has_many = ['posts' =&gt; ['order' =&gt; 'created_at DESC']];\n</code></pre> </li> <li> <p>Limit (Optional): To limit the number of associated records retrieved, you can use the <code>limit</code> property. This is useful for scenarios where you want to retrieve a specific number of related records. This property is optional.</p> <pre><code>static $has_many = ['posts' =&gt; ['limit' =&gt; 5]];\n</code></pre> </li> <li> <p>Offset (Optional): The <code>offset</code> property allows you to skip a specified number of records before retrieving associated records. It can be used in combination with <code>limit</code> for pagination purposes. This property is optional.</p> <pre><code>static $has_many = ['posts' =&gt; ['limit' =&gt; 5, 'offset' =&gt; 10]];\n</code></pre> </li> <li> <p>Conditions (Optional): You can specify conditions for retrieving associated records using the <code>conditions</code> property. This property allows you to filter the associated records based on specific criteria. This property is optional.</p> <pre><code>static $has_many = ['posts' =&gt; ['conditions' =&gt; ['status' =&gt; 'published']]];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <pre><code>class User extends ActiveRecord\\Model {\n    static $has_many = ['posts'=&gt;[]];\n}\n\nclass Post extends ActiveRecord\\Model {\n    static $belongs_to = ['user'=&gt;[]];\n}\n\n// Finding a user and accessing their posts\n$user = User::find(1);\n\n// Accessing the user's posts\n$posts = $user-&gt;posts;\n\n// Iterating through and displaying the user's posts\nforeach ($posts as $post) {\n    echo \"Post Title: \" . $post-&gt;title . \"&lt;br&gt;\";\n    echo \"Content: \" . $post-&gt;content . \"&lt;br&gt;&lt;br&gt;\";\n}\n</code></pre>"},{"location":"hasone/","title":"<code>$has_one</code> (one-to-one)","text":"<p>The <code>$has_one</code> relationship in ActiveRecord represents a one-to-one association between two database tables. It allows you to specify that a record in one table is associated with exactly one record in another table. To define a <code>$has_one</code> relationship, you need to configure the following properties:</p> <ul> <li> <p>Name of the Relationship: This property specifies the name of the relationship, which is used to access the associated record. It is typically set as a string representing the name of the associated model. </p> <pre><code>static $has_one = ['profile' =&gt; []];\n</code></pre> </li> <li> <p>Class Name (Optional): This property allows you to explicitly specify the class name of the associated model if it differs from the relationship name. This can be useful if your relationship and model names do not follow the default naming conventions.</p> <pre><code>static $has_one = [\n    'customProfile' =&gt; [\n        'class_name' =&gt; 'Profile'\n    ]\n];\n</code></pre> </li> <li> <p>Foreign Key (Optional): By default, ActiveRecord assumes that the foreign key in the associated table is derived from the name of the current model and suffixed with \"_id\" (e.g., \"user_id\" for a <code>User</code> model). You can specify a different foreign key if needed. This property is optional.</p> <pre><code>static $has_one = [\n    'customProfile' =&gt; [\n        'class_name' =&gt; 'Profile', \n        'foreign_key' =&gt; 'custom_user_id'\n    ]\n];\n</code></pre> </li> <li> <p>Primary Key (Optional): This property allows you to specify the primary key of the associated table if it is different from the default \"id\" column. Use this when your associated table uses a different primary key column. This property is optional.</p> <pre><code>static $has_one = [\n    'profile' =&gt; [\n        'primary_key' =&gt; 'profile_id'\n    ]\n];\n</code></pre> </li> <li> <p>Order (Optional): You can specify the order in which the associated records should be retrieved using the <code>order</code> property. This property is optional.</p> <pre><code>static $has_one = [\n    'profile' =&gt; [\n        'order' =&gt; 'created_at DESC'\n    ]\n];\n</code></pre> </li> <li> <p>Conditions (Optional): You can specify conditions for retrieving the associated record using the <code>conditions</code> property. This property allows you to filter the associated record based on specific criteria. This property is optional.</p> <pre><code>static $has_one = [\n    'profile' =&gt; [\n        'conditions' =&gt; [\n            'active' =&gt; true\n        ]\n    ]\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <pre><code>class User extends ActiveRecord\\Model {\n    static $has_one = [\n        'profile' =&gt; []\n    ];\n}\n\nclass Profile extends ActiveRecord\\Model {\n    static $belongs_to = [\n        'user' =&gt; []\n    ];\n}\n</code></pre> <p>In this example, a <code>User</code> model has a <code>$has_one</code> relationship with the <code>Profile</code> model. It allows you to access a user's profile information through the <code>profile</code> property.</p> <p>The <code>$has_one</code> relationship simplifies working with one-to-one associations in your database, making it easy to retrieve and manipulate associated records.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Begin by installing via composer: <pre><code>composer require php-patterns/activerecord\n</code></pre></p> <p>Setup is very easy and straight-forward. There are essentially only two configuration points you must concern yourself with:</p> <ol> <li>Configuring your database connections.</li> <li>Setting the database connection to use for your environment.</li> </ol> <p>Example:</p> <pre><code>// config.php\nuse ActiveRecord\\Model;\n\n$cfg = ActiveRecord\\Config::instance();\n$cfg-&gt;set_connections([\n    'development' =&gt; 'mysql://username:password@localhost/development_database_name',\n    'test' =&gt; 'mysql://username:password@localhost/test_database_name',\n    'production' =&gt; 'mysql://username:password@localhost/production_database_name'\n]);\n$cfg-&gt;set_default_connection('development'); // Set to 'development', 'test', or 'production'. 'development' is default\n</code></pre> <p>Then, begin setting up your model classes.</p> <pre><code>use ActiveRecord\\Model;\n\nclass Book extends Model {\n\n}\n</code></pre> <p>Provided you follow naming conventions in your classes and tables, you are off and running.</p> <pre><code>$book = Book::find(1);\n$book-&gt;title = \"Ubik\";\n$book-&gt;save();\n</code></pre>"},{"location":"relationships/","title":"Relationships","text":""},{"location":"relationships/#introduction","title":"Introduction","text":"<p>ActiveRecord allows you to define and work with relationships between database tables. These relationships mirror real-world associations, such as a User having many Posts or a Product belonging to many Categories.</p>"},{"location":"relationships/#types-of-relationships","title":"Types of Relationships","text":"<p>There are three main types of relationships in ActiveRecord:</p> <p>One-to-One: A record in one table is associated with one record in another table.</p> <p>One-to-Many: A record in one table is associated with multiple records in another table.</p> <p>Many-to-Many: Records in one table are associated with multiple records in another table, and vice versa.</p>"},{"location":"relationships/#defining-relationships","title":"Defining Relationships","text":"<p>To define relationships, you'll need to set up relationships between ActiveRecord models using static properties like <code>belongs_to</code>, <code>has_many</code>, and <code>has_and_belongs_to_many</code>.</p>"},{"location":"staticchecking/","title":"Static Checking","text":"<p>The PHP Active Record code base is statically checked for correctness using PHPStan. If you are using phpstan in your own code you can leverage the safety it provides by importing this project's neon file in your own:</p> <pre><code>// your phpstan.neon file\nparameters:\n...\nincludes:\n  - vendor/php-patterns/activerecord/extension.neon\n</code></pre> <p>There are several methods (namely <code>Model::find</code>, <code>Model::first</code>, <code>Model::last</code> and their counterparts on <code>Relation</code>) in this library that have dynamic return types, and by tying into  Active Record's bespoke extension.neon file you can eliminate much of the uncertainty around using them and avoid bugs before they happen. For example:</p> <pre><code>class Sample {\n  protected Book $book;\n\n  /**\n   * @var array&lt;Book&gt; \n   */\n  protected array $books;\n\n  function __construct() {\n    $this-&gt;book = Book::find(1); // ok\n    $this-&gt;book = Book::find([1,2,3]);  // PHPStan error!\n                                        // Can't assign array to single item\n  }\n}\n</code></pre>"},{"location":"upgrade/","title":"1.x -&gt; 2.x","text":"<p>2.x has a number of breaking API changes to be aware of. First, be aware that the minimum required PHP version is now 8.1. Other than that, there are some key API changes to be aware of.</p>"},{"location":"upgrade/#methods","title":"Methods","text":""},{"location":"upgrade/#modelfind","title":"<code>Model::find</code>","text":"<p>Much of the old <code>find</code> functionality has been moved to <code>Relation</code>. Most notably, the <code>conditions</code> argument is no longer supported, and has been replaced by <code>where()</code>:  <pre><code>// 1.x\n$books = Book::find([1,2,3], ['conditions'=&gt;['title = ?', 'Walden']]);\n\n// 2.0\n$books = Book::where('title = ?', 'Walden')-&gt;to_a();\n</code></pre></p> <p>Also, in 2.x we have fixed a bug around calling <code>find</code> with an empty array. It will now throw a <code>RecordNotFound</code> exception, as it should. If you were relying on the old behavior, you should switch to <code>where</code>: <pre><code>// 1.x\n$ids = [];\n$books = Book::find($ids);\n\n// 2.0\n$books::find($ids); // danger! now throws RecordNotFound\n$books = Book::where(['book_id' =&gt; $ids])-&gt;to_a(); // this is okay\n</code></pre></p> <p>The <code>all</code> argument has been removed in favor of <code>Relation::all</code> (which does nothing but return a relation object), or `Relation::where(): <pre><code>// 1.x\n$books = Book::find('all', ['conditions'=&gt;['title = ?', 'Walden']]);\n\n// 2.0\n$books = Book::all()-&gt;where('title = ?', 'Walden')-&gt;to_a();\n</code></pre></p> <p>The same goes for <code>first</code> and <code>last</code>: <pre><code>// 1.x\n$book = Book::find('first');\n$book = Book::find('last');\n\n// 2.0\n$book = Book::first();\n$book = Book::last();\n</code></pre></p>"},{"location":"upgrade/#modelall","title":"<code>Model::all</code>","text":"<p><code>Model::all()</code> no longer takes any arguments, and now returns an iterable <code>Relation</code> instead of an array of models: <pre><code>// 1.x\n$books = Book::all(['conditions'=&gt;['title = ?', 'Walden']]);\nforeach($books as $book) {}\n\n// 2.0\n$books = Book::where('title = ?', 'Walden')-&gt;all();\nforeach($books as $book) {}\n</code></pre></p> <p>The <code>all</code> argument has been removed in favor of <code>Relation::all</code>: <pre><code>// 1.x\n$books = Book::find('all', ['conditions'=&gt;['title = ?', 'Walden']]);\n\n// 2.0\n$books = Book::all()-&gt;where('title = ?', 'Walden')-&gt;to_a();\n</code></pre></p>"},{"location":"upgrade/#modelcount","title":"<code>Model::count</code>","text":"<p>The changes to <code>count</code> mirror the changes to <code>find</code>: <pre><code>// 1.x\n$numBooks = Book::count(['conditions'=&gt;['title = ?', 'Walden']]);\n\n// 2.0\n$books = Book::where('title = ?', 'Walden')-&gt;count();\n</code></pre></p>"},{"location":"upgrade/#modeldelete_all","title":"<code>Model::delete_all</code>","text":"<p>Likewise for <code>delete_all</code>: <pre><code>// 1.x\n$numDeleted = Book::delete_all(['conditions'=&gt;['title = ?', 'Walden']]);\n\n// 2.0\n$numDeleted = Book::where('title = ?', 'Walden')-&gt;delete_all();\n</code></pre></p>"},{"location":"upgrade/#modelupdate_all","title":"<code>Model::update_all</code>","text":"<p><code>update_all</code> has undergone a similar transformation, and now simply takes a string or hash of attributes as an argument: <pre><code>// 1.x\n$numUpdated = Book::update_all([\n  'conditions'=&gt;['title = ?', 'Walden'],\n  'set' =&gt; ['author_id' =&gt; 1]\n]);\n\n// 2.0\n$numUpdated = Book::where(['title = ?', 'Walden'])-&gt;update_all([\n  'author_id' =&gt; 1\n]);\n</code></pre></p>"},{"location":"upgrade/#modelfind_all_by_attribute","title":"<code>Model::find_all_by_&lt;attribute&gt;</code>","text":"<p>The <code>find_all_by...</code> style of magic method has been removed entirely. <pre><code>// 1.x\n$books = Book::find_all_by_title('Ubik');\n\n// 2.0\n$books = Book::where('title = ?', 'Ubik')-&gt;to_a();\n</code></pre></p>"},{"location":"upgrade/#modeltable","title":"<code>Model::table</code>","text":"<p>The static <code>table</code> accessor on <code>Model</code> is now protected. If you were making calls directly on <code>Table</code>, you will need to refactor your code. <pre><code>// 1.x\nBook::table()-&gt;update($attributes, $where);\n\n// 2.0\nBook::where($where)-&gt;update_all($attributes);\n</code></pre></p> <p>If you do need access to the table instance for some reason, you can still get to it: <pre><code>  $table = Table::load(Book::class);\n</code></pre></p>"},{"location":"upgrade/#static-properties","title":"Static Properties","text":"<p>The static relationship properties have changed shape, moving from a flat array to a key-config format:</p>"},{"location":"upgrade/#modelhas_one","title":"<code>Model::$has_one</code>","text":"<pre><code>// 1.x\nclass Author extends ActiveRecord \n{\n  static $has_one =  [\n    ['awesome_person', 'foreign_key' =&gt; 'author_id', 'primary_key' =&gt; 'author_id'],\n    ['parent_author', 'class_name' =&gt; 'Author', 'foreign_key' =&gt; 'parent_author_id']];\n}\n\n// 2.0\nclass Author extends ActiveRecord \n{\n  static $has_one =  [\n    'awesome_person' =&gt; [\n      'foreign_key' =&gt; 'author_id', \n      'primary_key' =&gt; 'author_id'\n    ],\n    [\n      'parent_author' =&gt; [\n        'class_name' =&gt; 'Author', \n        'foreign_key' =&gt; 'parent_author_id'\n        ]\n    ]\n  ];\n}\n</code></pre>"},{"location":"upgrade/#modelhas_many","title":"<code>Model::$has_many</code>","text":"<pre><code>// 1.x\nclass Person extends ActiveRecord \n{\n  static $has_many = [\n    ['children', 'foreign_key' =&gt; 'parent_id', 'class_name' =&gt; 'Person'],\n    ['orders']\n  ];\n}\n\n// 2.0\nclass Person extends ActiveRecord \n{\n  static $has_many = array(\n    [\n      'children' =&gt; [\n        'foreign_key' =&gt; 'parent_id', \n        'class_name' =&gt; 'Person'\n      ],\n      'orders' =&gt; true\n   ];\n}\n</code></pre>"},{"location":"upgrade/#modelbelongs_to","title":"<code>Model::$belongs_to</code>","text":"<pre><code>// 1.x\nclass Person extends ActiveRecord \n{\n  static $belongs_to = [\n    ['parent', 'foreign_key' =&gt; 'parent_id', 'class_name' =&gt; 'Person'],\n    ['orders']\n  ];\n}\n\n// 2.0\nclass Person extends ActiveRecord \n{\n  static $belongs_to = array(\n    [\n      'parent' =&gt; [\n        'foreign_key' =&gt; 'parent_id', \n        'class_name' =&gt; 'Person'\n      ],\n   ];\n}\n</code></pre>"},{"location":"upgrade/#modelvalidates_inclusion_of","title":"<code>Model::$validates_inclusion_of</code>","text":"<p>(note: the same changes apply for <code>Model::$validates_exclusion_of</code>)</p> <pre><code>// 1.x\nclass Book extends ActiveRecord \n{\n  public static $validates_exclusion_of = [\n        ['name', 'in' =&gt; ['blah', 'alpha', 'bravo']]\n    ];\n}\n\n// 2.0\nclass Book extends ActiveRecord \n{\n  public static $validates_exclusion_of = [\n    'name' =&gt; [\n      'in' =&gt; ['blah', 'alpha', 'bravo']]\n    ];\n}\n</code></pre>"},{"location":"upgrade/#other-changes","title":"Other Changes","text":""},{"location":"upgrade/#tableupdate","title":"<code>Table::update</code>","text":"<p>You generally shouldn't be working directly with a <code>Table</code> instance, but if you are you should be aware that the <code>update</code> method has changed shape: <pre><code>// 1.x \n$table = Book::table();\n$table-&gt;update([ 'title' =&gt; 'Walden` ], ['author_id` =&gt; 1]);\n\n// 2.0\n$table = Table::load(Book::class);\n$options = [\n    'conditions' =&gt; [new WhereClause(['author_id` =&gt; 1])]\n];\n$table-&gt;update([ 'title' =&gt; 'Walden' ], $options); // where $options is a RelationOptions\n</code></pre></p>"},{"location":"upgrade/#tabledelete","title":"<code>Table::delete</code>","text":"<p>You generally shouldn't be working directly with a <code>Table</code> instance, but if you are you should be aware that the <code>delete</code> method has changed shape: <pre><code>// 1.x \n$table = Book::table();\n$table-&gt;delete(['author_id' =&gt; 1]);\n\n// 2.0\n$table = Table::load(Book::class);\n$options = [\n    'conditions' =&gt; [new WhereClause(['author_id` =&gt; 1])]\n];\n$table-&gt;delete($options); // where $options is a RelationOptions.\n</code></pre></p>"},{"location":"upgrade/#configset_model_directory","title":"<code>Config::set_model_directory</code>","text":"<p><code>Config::set_model_directory</code> has been removed, meaning that the active record library no longer maintains its own autoloader or knowledge of where your models are kept. In 2.0 it is recommended to use your own autoloader to manage your models as you would any other classes in your project.</p> <p>When setting up relationships, active record will assume that any associations are in the same namespace as the class they are bound to. Alternatively, you can specify a class_name in the config options.</p> <p>Any of the following should work fine:</p> <pre><code>// 2.0\nnamespace test\\models;\n\nuse ActiveRecord\\Model;\n\nclass Author extends Model\n{\n    public static array $has_many = [\n        'books' =&gt; true // will attempt to load from test\\models\n    ];\n\n    public static array $has_one = [\n        'parent_author' =&gt; [\n            'class_name' =&gt; Author::class, \n            'foreign_key' =&gt; 'parent_author_id'\n        ]\n    ];\n\n}\n</code></pre>"},{"location":"upgrade/#exceptions-location","title":"exceptions location","text":"<p>All crafted exceptions have moved to a new home in the <code>Exceptions</code> namespace.</p> <pre><code>// 1.x\nuse ActiveRecord\\RecordNotFound\n\ntry {\n...\n}\ncatch(RecordNotFound)\n\n// 2.0\nuse ActiveRecord\\Exception\\RecordNotFound\n\ntry {\n...\n}\ncatch(RecordNotFound)\n</code></pre>"},{"location":"validatesexclusionof/","title":"<code>validates_exclusion_of</code>","text":"<p>The <code>validates_exclusion_of</code> validation in ActiveRecord allows you to validate whether an attribute's value is excluded from a specified set of values. It is commonly used to ensure that an attribute does not have a value that falls within a predefined list or range. To use <code>validates_exclusion_of</code>, you need to specify the following options:</p> <ul> <li> <p>Attribute Name: This option specifies the name of the attribute you want to validate for exclusion. It is typically set as a symbol or string.</p> <pre><code>static $validates_exclusion_of = [\n    'username' =&gt; []\n];\n</code></pre> </li> <li> <p>In (Required): The <code>in</code> option defines the set of values that the attribute's value must be excluded from. It is required and should be set as an array of values to be excluded.</p> <pre><code>static $validates_exclusion_of = [\n    'username' =&gt; [\n        'in' =&gt; ['admin', 'root', 'superuser']\n    ]\n];\n</code></pre> </li> <li> <p>Message (Optional): To customize the error message displayed when the validation fails, you can use the <code>message</code> option to provide a custom error message.</p> <pre><code>static $validates_exclusion_of = [\n    'status' =&gt; [\n        'in' =&gt; ['blocked', 'banned'],\n        'message' =&gt; 'Invalid status. Please choose a different status.',\n    ],\n];\n</code></pre> </li> <li> <p>Allow Blank (Optional): The <code>allow_blank</code> option allows you to specify whether the attribute is allowed to be empty (e.g., an empty string). By default, <code>allow_blank</code> is set to <code>false</code>, meaning that the attribute must not be blank. You can set it to <code>true</code> to allow blank values.</p> <pre><code>static $validates_exclusion_of = [\n    'user_type' =&gt; [\n        'in' =&gt; ['admin', 'moderator'], \n        'allow_blank' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>Allow Null (Optional): The <code>allow_null</code> option allows you to specify whether the attribute is allowed to be null. By default, <code>allow_nil</code> is set to <code>false</code>, meaning that the attribute must not be null. You can set it to <code>true</code> to allow null values.</p> <pre><code>static $validates_exclusion_of = [\n    'account_type' =&gt; [\n        'in' =&gt; ['suspended', 'disabled'], \n        'allow_null' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>On (Optional): The <code>on</code> option allows you to specify when the validation should occur. By default, it is set to <code>'save'</code>, which means the validation is performed when the record is saved. You can set it to <code>'create'</code> to validate only during the creation of a new record or <code>'update'</code> to validate only during updates.</p> <pre><code>static $validates_exclusion_of = [\n    'user_role' =&gt; [\n        'in' =&gt; ['admin', 'superuser'], \n        'on' =&gt; 'update'\n    ]\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <p>```php class User extends ActiveRecord\\Model {     static $validates_exclusion_of = [         'role' =&gt; [             'in' =&gt; ['admin', 'superuser'],             'message' =&gt; 'Invalid role. Please choose a different role.',             'allow_blank' =&gt; true,         ],     ]; }</p>"},{"location":"validatesformatof/","title":"<code>validates_format_of</code>","text":"<p>The <code>validates_format_of</code> validation in ActiveRecord allows you to validate whether an attribute's value matches a specified format using a regular expression. It is commonly used to ensure that attributes such as email addresses, URLs, or phone numbers adhere to a particular pattern. To use <code>validates_format_of</code>, you need to specify the following options:</p> <ul> <li> <p>Attribute Name: This option specifies the name of the attribute you want to validate for format. It is typically set as a symbol or string.</p> <pre><code>static $validates_format_of = ['email' =&gt; []];\n</code></pre> </li> <li> <p>With (Required): The <code>with</code> option defines the regular expression pattern that the attribute's value must match. It is required and should be set as a regular expression pattern enclosed in forward slashes.</p> <pre><code>static $validates_format_of = [\n    'email' =&gt; [\n        'with' =&gt; '/\\A[^@\\s]+@([^@\\s]+\\.)+[^@\\s]+\\z/'\n    ]\n];\n</code></pre> </li> <li> <p>Message (Optional): To customize the error message displayed when the validation fails, you can use the <code>message</code> option to provide a custom error message.</p> <pre><code>static $validates_format_of = [\n    'phone_number' =&gt; [\n        'with' =&gt; '/\\d{3}-\\d{3}-\\d{4}/',\n        'message' =&gt; 'Please enter a valid phone number in the format XXX-XXX-XXXX',\n    ],\n];\n</code></pre> </li> <li> <p>Allow Blank (Optional): The <code>allow_blank</code> option allows you to specify whether the attribute is allowed to be empty (e.g., an empty string). By default, <code>allow_blank</code> is set to <code>false</code>, meaning that the attribute must not be blank. You can set it to <code>true</code> to allow blank values.</p> <pre><code>static $validates_format_of = [\n    'website' =&gt; [\n        'with' =&gt; '/^https?:\\/\\//', 'allow_blank' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>Allow Null (Optional): The <code>allow_null</code> option allows you to specify whether the attribute is allowed to be null. By default, <code>allow_nil</code> is set to <code>false</code>, meaning that the attribute must not be null. You can set it to <code>true</code> to allow null values.</p> <pre><code>static $validates_format_of = [\n    'ssn' =&gt; [\n        'with' =&gt; '/^\\d{3}-\\d{2}-\\d{4}/', \n        'allow_null' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>On (Optional): The <code>on</code> option allows you to specify when the validation should occur. By default, it is set to <code>'save'</code>, which means the validation is performed when the record is saved. You can set it to <code>'create'</code> to validate only during the creation of a new record or <code>'update'</code> to validate only during updates.</p> <pre><code>static $validates_format_of = [\n    'credit_card' =&gt; [\n        'with' =&gt; '/^\\d{16}/', 'on' =&gt; 'create'\n    ]\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <pre><code>class User extends ActiveRecord\\Model {\n    static $validates_format_of = [\n        'email' =&gt; [\n            'with' =&gt; '/\\A[^@\\s]+@([^@\\s]+\\.)+[^@\\s]+\\z/',\n            'message' =&gt; 'Please enter a valid email address.',\n        ],\n    ];\n}\n</code></pre>"},{"location":"validatesinclusionof/","title":"<code>validates_inclusion_of</code>","text":"<p>The <code>validates_inclusion_of</code> validation in ActiveRecord allows you to validate whether an attribute's value is included in a specified set of values. It is commonly used to ensure that an attribute has a value that falls within a predefined list or range. To use <code>validates_inclusion_of</code>, you need to specify the following options:</p> <ul> <li> <p>Attribute Name: This option specifies the name of the attribute you want to validate for inclusion. It is typically set as a symbol or string.</p> <pre><code>static $validates_inclusion_of = [\n    'gender' =&gt; []\n];\n</code></pre> </li> <li> <p>In (Required): The <code>in</code> option defines the set of values that the attribute's value must be included in. It is required and should be set as an array of valid values.</p> <pre><code>static $validates_inclusion_of = [\n    'gender' =&gt; [\n        'in' =&gt; ['male', 'female', 'non-binary']\n    ]\n];\n</code></pre> </li> <li> <p>Message (Optional): To customize the error message displayed when the validation fails, you can use the <code>message</code> option to provide a custom error message.</p> <pre><code>static $validates_inclusion_of = [\n    'role' =&gt; [\n        'in' =&gt; ['admin', 'user'],\n        'message' =&gt; 'Invalid role. Please choose a valid role (admin or user).',\n    ],\n];\n</code></pre> </li> <li> <p>Allow Blank (Optional): The <code>allow_blank</code> option allows you to specify whether the attribute is allowed to be empty (e.g., an empty string). By default, <code>allow_blank</code> is set to <code>false</code>, meaning that the attribute must not be blank. You can set it to <code>true</code> to allow blank values.</p> <pre><code>static $validates_inclusion_of = [\n    'subscription_type' =&gt; [\n        'in' =&gt; ['free', 'premium'], \n        'allow_blank' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>Allow Null (Optional): The <code>allow_null</code> option allows you to specify whether the attribute is allowed to be null. By default, <code>allow_null</code> is set to <code>false</code>, meaning that the attribute must not be null. You can set it to <code>true</code> to allow null values.</p> <pre><code>static $validates_inclusion_of = [\n    'country' =&gt; [\n        'in' =&gt; ['USA', 'Canada'], \n        'allow_null' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>On (Optional): The <code>on</code> option allows you to specify when the validation should occur. By default, it is set to <code>'save'</code>, which means the validation is performed when the record is saved. You can set it to <code>'create'</code> to validate only during the creation of a new record or <code>'update'</code> to validate only during updates.</p> <pre><code>static $validates_inclusion_of = [\n    'status' =&gt; [\n        'in' =&gt; ['active', 'inactive'], \n        'on' =&gt; 'update'\n    ]\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <p>```php class User extends ActiveRecord\\Model {     static $validates_inclusion_of = [         'role' =&gt; [             'in' =&gt; ['admin', 'user'],             'message' =&gt; 'Invalid role. Please choose a valid role (admin or user).',             'allow_blank' =&gt; true,         ],     ]; }</p>"},{"location":"validateslengthof/","title":"<code>validates_length_of</code> Validation","text":"<p>The <code>validates_length_of</code> validation in ActiveRecord allows you to validate the length of an attribute's value, such as a string or an array. You can set minimum and maximum length constraints to ensure that the attribute's value falls within the desired range. To use <code>validates_length_of</code>, you need to specify the following options:</p> <ul> <li> <p>Attribute Name: This option specifies the name of the attribute you want to validate. It is typically set as a symbol or string.</p> <pre><code>static $validates_length_of = [\n    'name' =&gt; []\n];\n</code></pre> </li> <li> <p>Minimum Length (Optional): You can set the minimum length that the attribute's value must have by using the <code>minimum</code> option. If the value is shorter than the specified minimum, the validation will fail.</p> <pre><code>static $validates_length_of = [\n    'name' =&gt; [\n        'minimum' =&gt; 3\n    ]\n];\n</code></pre> </li> <li> <p>Maximum Length (Optional): You can set the maximum length that the attribute's value can have by using the <code>maximum</code> option. If the value exceeds the specified maximum, the validation will fail.</p> <pre><code>static $validates_length_of = [\n    'description' =&gt; [\n        'maximum' =&gt; 255\n    ]\n];\n</code></pre> </li> <li> <p>Message (Optional): To customize the error message displayed when the validation fails, you can use the <code>too_short</code> and <code>too_long</code> options to provide custom error messages.</p> <pre><code>static $validates_length_of = [\n    'username' =&gt; [\n        'minimum' =&gt; 6,\n        'message' =&gt; 'Username is too short (minimum is 6 characters)',\n    ],\n    'bio' =&gt; [\n        'maximum' =&gt; 500,\n        'message' =&gt; 'Bio is too long (maximum is 500 characters)',\n    ],\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <pre><code>class User extends ActiveRecord\\Model {\n    static $validates_length_of = ['username' =&gt; ['minimum' =&gt; 3, 'maximum' =&gt; 20]];\n}\n</code></pre>"},{"location":"validatesnumericalityof/","title":"<code>validates_numericality_of</code>","text":"<p>The <code>validates_numericality_of</code> validation in ActiveRecord allows you to validate whether an attribute's value is a valid numeric value. It ensures that the attribute contains a number and optionally checks for numerical constraints such as minimum and maximum values. To use <code>validates_numericality_of</code>, you need to specify the following options:</p> <ul> <li> <p>Attribute Name: This option specifies the name of the attribute you want to validate for numericality. It is typically set as a symbol or string.</p> <pre><code>static $validates_numericality_of = [\n    'age' =&gt; []\n];\n</code></pre> </li> <li> <p>Message (Optional): To customize the error message displayed when the validation fails, you can use the <code>message</code> option to provide a custom error message.</p> <pre><code>static $validates_numericality_of = [\n    'price' =&gt; [\n        'message' =&gt; 'Price must be a valid number.',\n    ],\n];\n</code></pre> </li> <li> <p>Only Integer (Optional): The <code>only_integer</code> option allows you to specify whether the attribute's value must be an integer. By default, <code>only_integer</code> is set to <code>false</code>, meaning that any numeric value is accepted. You can set it to <code>true</code> to enforce integer values.</p> <pre><code>static $validates_numericality_of = [\n    'quantity' =&gt; [\n        'only_integer' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>Greater Than (Optional): The <code>greater_than</code> option allows you to specify a minimum value that the attribute's value must be greater than. It ensures that the numeric value is greater than the specified threshold.</p> <pre><code>static $validates_numericality_of = [\n    'score' =&gt; [\n        'greater_than' =&gt; 0\n    ]\n];\n</code></pre> </li> <li> <p>Greater Than Or Equal To (Optional): The <code>greater_than_or_equal_to</code> option allows you to specify a minimum value that the attribute's value must be greater than or equal to. It ensures that the numeric value is greater than or equal to the specified threshold.</p> <pre><code>static $validates_numericality_of = [\n    'temperature' =&gt; [\n        'greater_than_or_equal_to' =&gt; -20\n    ]\n];\n</code></pre> </li> <li> <p>Less Than (Optional): The <code>less_than</code> option allows you to specify a maximum value that the attribute's value must be less than. It ensures that the numeric value is less than the specified threshold.</p> <pre><code>static $validates_numericality_of = [\n    'discount' =&gt; [\n        'less_than' =&gt; 100\n    ]\n];\n</code></pre> </li> <li> <p>Less Than Or Equal To (Optional): The <code>less_than_or_equal_to</code> option allows you to specify a maximum value that the attribute's value must be less than or equal to. It ensures that the numeric value is less than or equal to the specified threshold.</p> <pre><code>static $validates_numericality_of = [\n    'percentage' =&gt; [\n        'less_than_or_equal_to' =&gt; 100\n    ]\n];\n</code></pre> </li> <li> <p>Equal To (Optional): The <code>equal_to</code> option allows you to specify a value that the attribute's value must be equal to. It ensures that the numeric value matches the specified value.</p> <pre><code>static $validates_numericality_of = [\n    'quantity' =&gt; [\n        'equal_to' =&gt; 10\n    ]\n];\n</code></pre> </li> <li> <p>Allow Blank (Optional): The <code>allow_blank</code> option allows you to specify whether the attribute is allowed to be empty (e.g., an empty string). By default, <code>allow_blank</code> is set to <code>false</code>, meaning that the attribute must not be blank. You can set it to <code>true</code> to allow blank values.</p> <pre><code>static $validates_numericality_of = [\n    'price' =&gt; [\n        'allow_blank' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>Allow Null (Optional): The <code>allow_null</code> option allows you to specify whether the attribute is allowed to be null. By default, <code>allow_nil</code> is set to <code>false</code>, meaning that the attribute must not be null. You can set it to <code>true</code> to allow null values.</p> <pre><code>static $validates_numericality_of = [\n    'height' =&gt; [\n        'allow_null' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>On (Optional): The <code>on</code> option allows you to specify when the validation should occur. By default, it is set to <code>'save'</code>, which means the validation is performed when the record is saved. You can set it to <code>'create'</code> to validate only during the creation of a new record or <code>'update'</code> to validate only during updates.</p> <pre><code>static $validates_numericality_of = [\n    'quantity' =&gt; [\n        'on' =&gt; 'create'\n    ]\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <pre><code>class Product extends ActiveRecord\\Model {\n    static $validates_numericality_of = [\n      'quantity' =&gt; [\n        'only_integer' =&gt; true, \n        'greater_than' =&gt; 0\n        ]\n    ];\n}\n</code></pre>"},{"location":"validatespresenceof/","title":"<code>$validates_presence_of</code> Validation","text":"<p>The <code>$validates_presence_of</code> validation in ActiveRecord allows you to validate whether an attribute's value is present or not. It ensures that the attribute is not empty or null unless specific conditions are met. To use <code>$validates_presence_of</code>, you need to specify the following options:</p> <ul> <li> <p>Attribute Name: This option specifies the name of the attribute you want to validate for presence. It is typically set as a symbol or string.</p> <pre><code>static $validates_presence_of = ['name' =&gt; []];\n</code></pre> </li> <li> <p>Allow Null (Optional): The <code>allow_null</code> option allows you to specify whether the attribute is allowed to be null. By default, <code>allow_null</code> is set to <code>false</code>, meaning that the attribute must not be null. You can set it to <code>true</code> to allow null values.</p> <pre><code>static $validates_presence_of = [\n    'middle_name' =&gt; [\n        'allow_null' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>Allow Blank (Optional): The <code>allow_blank</code> option allows you to specify whether the attribute is allowed to be empty (e.g., an empty string). By default, <code>allow_blank</code> is set to <code>false</code>, meaning that the attribute must not be blank. You can set it to <code>true</code> to allow blank values.</p> <pre><code>static $validates_presence_of = [\n    'comments' =&gt; [\n        'allow_blank' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>Message (Optional): To customize the error message displayed when the validation fails, you can use the <code>message</code> option to provide a custom error message.</p> <pre><code>static $validates_presence_of = [\n    'email' =&gt; [\n        'message' =&gt; 'Email address is required'\n    ]\n];\n</code></pre> </li> <li> <p>On (Optional): The <code>on</code> option allows you to specify when the validation should occur. By default, it is set to <code>'save'</code>, which means the validation is performed when the record is saved. You can set it to <code>'create'</code> to validate only during the creation of a new record or <code>'update'</code> to validate only during updates.</p> <pre><code>static $validates_presence_of = [\n    'address' =&gt; [\n        'on' =&gt; 'create'\n    ]\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <p>```php class User extends ActiveRecord\\Model {     static $validates_presence_of = [         'username' =&gt; ['allow_blank' =&gt; true],         'email' =&gt; ['allow_null' =&gt; true],         'first_name' =&gt; [],     ]; }</p>"},{"location":"validatesuniquenessof/","title":"<code>validates_uniqueness_of</code>","text":"<p>The <code>validates_uniqueness_of</code> validation in ActiveRecord allows you to validate whether an attribute's value is unique among the records in the database table. It ensures that the attribute's value is not duplicated within the dataset. To use <code>validates_uniqueness_of</code>, you need to specify the following options:</p> <ul> <li> <p>Attribute Name: This option specifies the name of the attribute you want to validate for uniqueness. It is typically set as a symbol or string.</p> <pre><code>static $validates_uniqueness_of = ['email' =&gt; []];\n</code></pre> </li> <li> <p>Message (Optional): To customize the error message displayed when the validation fails, you can use the <code>message</code> option to provide a custom error message.</p> <pre><code>static $validates_uniqueness_of = [\n    'username' =&gt; [\n        'message' =&gt; 'This username is already in use. Please choose a different one.',\n    ],\n];\n</code></pre> </li> <li> <p>Scope (Optional): The <code>scope</code> option allows you to specify additional conditions for uniqueness validation. It is used when you want to ensure uniqueness based on certain criteria. You can specify an array of attribute names to scope the uniqueness check.</p> <pre><code>static $validates_uniqueness_of = [\n    'email' =&gt; [\n        'scope' =&gt; ['account_type', 'status'],\n        'message' =&gt; 'Email address must be unique for the selected account type and status.',\n    ],\n];\n</code></pre> </li> <li> <p>Allow Blank (Optional): The <code>allow_blank</code> option allows you to specify whether the attribute is allowed to be empty (e.g., an empty string). By default, <code>allow_blank</code> is set to <code>false</code>, meaning that the attribute must not be blank. You can set it to <code>true</code> to allow blank values.</p> <pre><code>static $validates_uniqueness_of = [\n    'email' =&gt; [\n        'allow_blank' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>Allow Null (Optional): The <code>allow_null</code> option allows you to specify whether the attribute is allowed to be null. By default, <code>allow_null</code> is set to <code>false</code>, meaning that the attribute must not be null. You can set it to <code>true</code> to allow null values.</p> <pre><code>static $validates_uniqueness_of = [\n    'username' =&gt; [\n        'allow_null' =&gt; true\n    ]\n];\n</code></pre> </li> <li> <p>On (Optional): The <code>on</code> option allows you to specify when the validation should occur. By default, it is set to <code>'save'</code>, which means the validation is performed when the record is saved. You can set it to <code>'create'</code> to validate only during the creation of a new record or <code>'update'</code> to validate only during updates.</p> <pre><code>static $validates_uniqueness_of = [\n    'username' =&gt; [\n        'on' =&gt; 'create'\n    ]\n];\n</code></pre> </li> </ul> <p>Example of Usage:</p> <pre><code>class User extends ActiveRecord\\Model {\n    static $validates_uniqueness_of = ['email', 'username'];\n}\n</code></pre>"},{"location":"validations/","title":"Validations","text":""},{"location":"validations/#introduction","title":"Introduction","text":"<p>Validations in PHP ActiveRecord are a set of rules and techniques used to ensure that data stored in the database meets specific criteria and adheres to the application's requirements. Proper validation helps maintain data accuracy, integrity, and consistency, while also improving security and user experience.</p>"},{"location":"validations/#why-use-validations","title":"Why Use Validations?","text":"<p>Data Integrity: Validations help ensure that your database contains accurate and meaningful data by preventing the storage of incorrect or incomplete information.</p> <p>Security: Properly validated data can protect your application from common security threats, such as SQL injection and data manipulation attacks.</p> <p>User Experience: Validations enhance the user experience by providing clear and helpful error messages when data submission fails.</p> <p>Common Validation Scenarios In PHP ActiveRecord, you can apply validations to your models to ensure data correctness in various scenarios, including:</p>"}]}